#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;

int n, q;
vector<ll> BIT1, BIT2;

void update(vector<ll>& BIT, int index, ll val) {
    while (index <= n) {
        BIT[index] += val;
        index += index & -index;
    }
}

ll query(const vector<ll>& BIT, int index) {
    ll res = 0;
    while (index > 0) {
        res += BIT[index];
        index -= index & -index;
    }
    return res;
}

// Cộng x vào đoạn [l, r]
void range_add(int l, int r, ll x) {
    update(BIT1, l, x);
    update(BIT1, r + 1, -x);
    update(BIT2, l, x * (l - 1));
    update(BIT2, r + 1, -x * r);
}

// Tính tổng đoạn [1..p]
ll prefix_sum(int p) {
    return query(BIT1, p) * p - query(BIT2, p);
}

// Tính tổng đoạn [l..r]
ll range_sum(int l, int r) {
    return prefix_sum(r) - prefix_sum(l - 1);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n >> q;
    BIT1.assign(n + 2, 0);
    BIT2.assign(n + 2, 0);

    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int l, r;
            ll x;
            cin >> l >> r >> x;
            range_add(l, r, x);
        } else if (type == 2) {
            int l, r;
            cin >> l >> r;
            cout << range_sum(l, r) << '\n';
        }
    }

    return 0;
}
